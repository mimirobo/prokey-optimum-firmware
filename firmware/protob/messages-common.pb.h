/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.3 */

#ifndef PB_HW_TREZOR_MESSAGES_COMMON_MESSAGES_COMMON_PB_H_INCLUDED
#define PB_HW_TREZOR_MESSAGES_COMMON_MESSAGES_COMMON_PB_H_INCLUDED
#include "pb.h"
/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _FailureType {
    FailureType_Failure_UnexpectedMessage = 1,
    FailureType_Failure_ButtonExpected = 2,
    FailureType_Failure_DataError = 3,
    FailureType_Failure_ActionCancelled = 4,
    FailureType_Failure_PinExpected = 5,
    FailureType_Failure_PinCancelled = 6,
    FailureType_Failure_PinInvalid = 7,
    FailureType_Failure_InvalidSignature = 8,
    FailureType_Failure_ProcessError = 9,
    FailureType_Failure_NotEnoughFunds = 10,
    FailureType_Failure_NotInitialized = 11,
    FailureType_Failure_PinMismatch = 12,
    FailureType_Failure_FirmwareError = 99
} FailureType;
#define _FailureType_MIN FailureType_Failure_UnexpectedMessage
#define _FailureType_MAX FailureType_Failure_FirmwareError
#define _FailureType_ARRAYSIZE ((FailureType)(FailureType_Failure_FirmwareError+1))

typedef enum _ButtonRequestType {
    ButtonRequestType_ButtonRequest_Other = 1,
    ButtonRequestType_ButtonRequest_FeeOverThreshold = 2,
    ButtonRequestType_ButtonRequest_ConfirmOutput = 3,
    ButtonRequestType_ButtonRequest_ResetDevice = 4,
    ButtonRequestType_ButtonRequest_ConfirmWord = 5,
    ButtonRequestType_ButtonRequest_WipeDevice = 6,
    ButtonRequestType_ButtonRequest_ProtectCall = 7,
    ButtonRequestType_ButtonRequest_SignTx = 8,
    ButtonRequestType_ButtonRequest_FirmwareCheck = 9,
    ButtonRequestType_ButtonRequest_Address = 10,
    ButtonRequestType_ButtonRequest_PublicKey = 11,
    ButtonRequestType_ButtonRequest_MnemonicWordCount = 12,
    ButtonRequestType_ButtonRequest_MnemonicInput = 13,
    ButtonRequestType_ButtonRequest_PassphraseType = 14,
    ButtonRequestType_ButtonRequest_UnknownDerivationPath = 15
} ButtonRequestType;
#define _ButtonRequestType_MIN ButtonRequestType_ButtonRequest_Other
#define _ButtonRequestType_MAX ButtonRequestType_ButtonRequest_UnknownDerivationPath
#define _ButtonRequestType_ARRAYSIZE ((ButtonRequestType)(ButtonRequestType_ButtonRequest_UnknownDerivationPath+1))

typedef enum _PinMatrixRequestType {
    PinMatrixRequestType_PinMatrixRequestType_Current = 1,
    PinMatrixRequestType_PinMatrixRequestType_NewFirst = 2,
    PinMatrixRequestType_PinMatrixRequestType_NewSecond = 3
} PinMatrixRequestType;
#define _PinMatrixRequestType_MIN PinMatrixRequestType_PinMatrixRequestType_Current
#define _PinMatrixRequestType_MAX PinMatrixRequestType_PinMatrixRequestType_NewSecond
#define _PinMatrixRequestType_ARRAYSIZE ((PinMatrixRequestType)(PinMatrixRequestType_PinMatrixRequestType_NewSecond+1))

/* Struct definitions */
typedef struct _ButtonAck {
    char dummy_field;
/* @@protoc_insertion_point(struct:ButtonAck) */
} ButtonAck;

typedef struct _PassphraseStateAck {
    char dummy_field;
/* @@protoc_insertion_point(struct:PassphraseStateAck) */
} PassphraseStateAck;

typedef struct _ButtonRequest {
    bool has_code;
    ButtonRequestType code;
    bool has_data;
    char data[256];
/* @@protoc_insertion_point(struct:ButtonRequest) */
} ButtonRequest;

typedef struct _Failure {
    bool has_code;
    FailureType code;
    bool has_message;
    char message[256];
/* @@protoc_insertion_point(struct:Failure) */
} Failure;

typedef PB_BYTES_ARRAY_T(32) HDNodeType_chain_code_t;
typedef PB_BYTES_ARRAY_T(32) HDNodeType_private_key_t;
typedef PB_BYTES_ARRAY_T(33) HDNodeType_public_key_t;
typedef struct _HDNodeType {
    uint32_t depth;
    uint32_t fingerprint;
    uint32_t child_num;
    HDNodeType_chain_code_t chain_code;
    bool has_private_key;
    HDNodeType_private_key_t private_key;
    bool has_public_key;
    HDNodeType_public_key_t public_key;
/* @@protoc_insertion_point(struct:HDNodeType) */
} HDNodeType;

typedef PB_BYTES_ARRAY_T(64) PassphraseAck_state_t;
typedef struct _PassphraseAck {
    bool has_passphrase;
    char passphrase[51];
    bool has_state;
    PassphraseAck_state_t state;
/* @@protoc_insertion_point(struct:PassphraseAck) */
} PassphraseAck;

typedef struct _PassphraseRequest {
    bool has_on_device;
    bool on_device;
/* @@protoc_insertion_point(struct:PassphraseRequest) */
} PassphraseRequest;

typedef PB_BYTES_ARRAY_T(64) PassphraseStateRequest_state_t;
typedef struct _PassphraseStateRequest {
    bool has_state;
    PassphraseStateRequest_state_t state;
/* @@protoc_insertion_point(struct:PassphraseStateRequest) */
} PassphraseStateRequest;

typedef struct _PinMatrixAck {
    char pin[10];
/* @@protoc_insertion_point(struct:PinMatrixAck) */
} PinMatrixAck;

typedef struct _PinMatrixRequest {
    bool has_type;
    PinMatrixRequestType type;
/* @@protoc_insertion_point(struct:PinMatrixRequest) */
} PinMatrixRequest;

typedef struct _Success {
    bool has_message;
    char message[256];
/* @@protoc_insertion_point(struct:Success) */
} Success;

/* Default values for struct fields */

/* Initializer values for message structs */
#define Success_init_default                     {false, ""}
#define Failure_init_default                     {false, _FailureType_MIN, false, ""}
#define ButtonRequest_init_default               {false, _ButtonRequestType_MIN, false, ""}
#define ButtonAck_init_default                   {0}
#define PinMatrixRequest_init_default            {false, _PinMatrixRequestType_MIN}
#define PinMatrixAck_init_default                {""}
#define PassphraseRequest_init_default           {false, 0}
#define PassphraseAck_init_default               {false, "", false, {0, {0}}}
#define PassphraseStateRequest_init_default      {false, {0, {0}}}
#define PassphraseStateAck_init_default          {0}
#define HDNodeType_init_default                  {0, 0, 0, {0, {0}}, false, {0, {0}}, false, {0, {0}}}
#define Success_init_zero                        {false, ""}
#define Failure_init_zero                        {false, _FailureType_MIN, false, ""}
#define ButtonRequest_init_zero                  {false, _ButtonRequestType_MIN, false, ""}
#define ButtonAck_init_zero                      {0}
#define PinMatrixRequest_init_zero               {false, _PinMatrixRequestType_MIN}
#define PinMatrixAck_init_zero                   {""}
#define PassphraseRequest_init_zero              {false, 0}
#define PassphraseAck_init_zero                  {false, "", false, {0, {0}}}
#define PassphraseStateRequest_init_zero         {false, {0, {0}}}
#define PassphraseStateAck_init_zero             {0}
#define HDNodeType_init_zero                     {0, 0, 0, {0, {0}}, false, {0, {0}}, false, {0, {0}}}

/* Field tags (for use in manual encoding/decoding) */
#define ButtonRequest_code_tag                   1
#define ButtonRequest_data_tag                   2
#define Failure_code_tag                         1
#define Failure_message_tag                      2
#define HDNodeType_depth_tag                     1
#define HDNodeType_fingerprint_tag               2
#define HDNodeType_child_num_tag                 3
#define HDNodeType_chain_code_tag                4
#define HDNodeType_private_key_tag               5
#define HDNodeType_public_key_tag                6
#define PassphraseAck_passphrase_tag             1
#define PassphraseAck_state_tag                  2
#define PassphraseRequest_on_device_tag          1
#define PassphraseStateRequest_state_tag         1
#define PinMatrixAck_pin_tag                     1
#define PinMatrixRequest_type_tag                1
#define Success_message_tag                      1

/* Struct field encoding specification for nanopb */
extern const pb_field_t Success_fields[2];
extern const pb_field_t Failure_fields[3];
extern const pb_field_t ButtonRequest_fields[3];
extern const pb_field_t ButtonAck_fields[1];
extern const pb_field_t PinMatrixRequest_fields[2];
extern const pb_field_t PinMatrixAck_fields[2];
extern const pb_field_t PassphraseRequest_fields[2];
extern const pb_field_t PassphraseAck_fields[3];
extern const pb_field_t PassphraseStateRequest_fields[2];
extern const pb_field_t PassphraseStateAck_fields[1];
extern const pb_field_t HDNodeType_fields[7];

/* Maximum encoded size of messages (where known) */
#define Success_size                             259
#define Failure_size                             261
#define ButtonRequest_size                       261
#define ButtonAck_size                           0
#define PinMatrixRequest_size                    2
#define PinMatrixAck_size                        12
#define PassphraseRequest_size                   2
#define PassphraseAck_size                       119
#define PassphraseStateRequest_size              66
#define PassphraseStateAck_size                  0
#define HDNodeType_size                          121

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define MESSAGES_COMMON_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
