/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.3 */

#ifndef PB_HW_TREZOR_MESSAGES_DEBUG_MESSAGES_DEBUG_PB_H_INCLUDED
#define PB_HW_TREZOR_MESSAGES_DEBUG_MESSAGES_DEBUG_PB_H_INCLUDED
#include "pb.h"
#include "messages-common.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _DebugLinkGetState {
    char dummy_field;
/* @@protoc_insertion_point(struct:DebugLinkGetState) */
} DebugLinkGetState;

typedef struct _DebugLinkStop {
    char dummy_field;
/* @@protoc_insertion_point(struct:DebugLinkStop) */
} DebugLinkStop;

typedef struct _DebugLinkDecision {
    bool has_yes_no;
    bool yes_no;
    bool has_up_down;
    bool up_down;
    bool has_input;
    char input[33];
/* @@protoc_insertion_point(struct:DebugLinkDecision) */
} DebugLinkDecision;

typedef struct _DebugLinkFlashErase {
    bool has_sector;
    uint32_t sector;
/* @@protoc_insertion_point(struct:DebugLinkFlashErase) */
} DebugLinkFlashErase;

typedef struct _DebugLinkLog {
    bool has_level;
    uint32_t level;
    bool has_bucket;
    char bucket[33];
    bool has_text;
    char text[256];
/* @@protoc_insertion_point(struct:DebugLinkLog) */
} DebugLinkLog;

typedef PB_BYTES_ARRAY_T(1024) DebugLinkMemory_memory_t;
typedef struct _DebugLinkMemory {
    bool has_memory;
    DebugLinkMemory_memory_t memory;
/* @@protoc_insertion_point(struct:DebugLinkMemory) */
} DebugLinkMemory;

typedef struct _DebugLinkMemoryRead {
    bool has_address;
    uint32_t address;
    bool has_length;
    uint32_t length;
/* @@protoc_insertion_point(struct:DebugLinkMemoryRead) */
} DebugLinkMemoryRead;

typedef PB_BYTES_ARRAY_T(1024) DebugLinkMemoryWrite_memory_t;
typedef struct _DebugLinkMemoryWrite {
    bool has_address;
    uint32_t address;
    bool has_memory;
    DebugLinkMemoryWrite_memory_t memory;
    bool has_flash;
    bool flash;
/* @@protoc_insertion_point(struct:DebugLinkMemoryWrite) */
} DebugLinkMemoryWrite;

typedef PB_BYTES_ARRAY_T(1024) DebugLinkState_layout_t;
typedef PB_BYTES_ARRAY_T(240) DebugLinkState_mnemonic_secret_t;
typedef PB_BYTES_ARRAY_T(128) DebugLinkState_reset_entropy_t;
typedef struct _DebugLinkState {
    bool has_layout;
    DebugLinkState_layout_t layout;
    bool has_pin;
    char pin[10];
    bool has_matrix;
    char matrix[10];
    bool has_mnemonic_secret;
    DebugLinkState_mnemonic_secret_t mnemonic_secret;
    bool has_node;
    HDNodeType node;
    bool has_passphrase_protection;
    bool passphrase_protection;
    bool has_reset_word;
    char reset_word[12];
    bool has_reset_entropy;
    DebugLinkState_reset_entropy_t reset_entropy;
    bool has_recovery_fake_word;
    char recovery_fake_word[12];
    bool has_recovery_word_pos;
    uint32_t recovery_word_pos;
    bool has_reset_word_pos;
    uint32_t reset_word_pos;
    bool has_mnemonic_type;
    uint32_t mnemonic_type;
/* @@protoc_insertion_point(struct:DebugLinkState) */
} DebugLinkState;

/* Default values for struct fields */

/* Initializer values for message structs */
#define DebugLinkDecision_init_default           {false, 0, false, 0, false, ""}
#define DebugLinkGetState_init_default           {0}
#define DebugLinkState_init_default              {false, {0, {0}}, false, "", false, "", false, {0, {0}}, false, HDNodeType_init_default, false, 0, false, "", false, {0, {0}}, false, "", false, 0, false, 0, false, 0}
#define DebugLinkStop_init_default               {0}
#define DebugLinkLog_init_default                {false, 0, false, "", false, ""}
#define DebugLinkMemoryRead_init_default         {false, 0, false, 0}
#define DebugLinkMemory_init_default             {false, {0, {0}}}
#define DebugLinkMemoryWrite_init_default        {false, 0, false, {0, {0}}, false, 0}
#define DebugLinkFlashErase_init_default         {false, 0}
#define DebugLinkDecision_init_zero              {false, 0, false, 0, false, ""}
#define DebugLinkGetState_init_zero              {0}
#define DebugLinkState_init_zero                 {false, {0, {0}}, false, "", false, "", false, {0, {0}}, false, HDNodeType_init_zero, false, 0, false, "", false, {0, {0}}, false, "", false, 0, false, 0, false, 0}
#define DebugLinkStop_init_zero                  {0}
#define DebugLinkLog_init_zero                   {false, 0, false, "", false, ""}
#define DebugLinkMemoryRead_init_zero            {false, 0, false, 0}
#define DebugLinkMemory_init_zero                {false, {0, {0}}}
#define DebugLinkMemoryWrite_init_zero           {false, 0, false, {0, {0}}, false, 0}
#define DebugLinkFlashErase_init_zero            {false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define DebugLinkDecision_yes_no_tag             1
#define DebugLinkDecision_up_down_tag            2
#define DebugLinkDecision_input_tag              3
#define DebugLinkFlashErase_sector_tag           1
#define DebugLinkLog_level_tag                   1
#define DebugLinkLog_bucket_tag                  2
#define DebugLinkLog_text_tag                    3
#define DebugLinkMemory_memory_tag               1
#define DebugLinkMemoryRead_address_tag          1
#define DebugLinkMemoryRead_length_tag           2
#define DebugLinkMemoryWrite_address_tag         1
#define DebugLinkMemoryWrite_memory_tag          2
#define DebugLinkMemoryWrite_flash_tag           3
#define DebugLinkState_layout_tag                1
#define DebugLinkState_pin_tag                   2
#define DebugLinkState_matrix_tag                3
#define DebugLinkState_mnemonic_secret_tag       4
#define DebugLinkState_node_tag                  5
#define DebugLinkState_passphrase_protection_tag 6
#define DebugLinkState_reset_word_tag            7
#define DebugLinkState_reset_entropy_tag         8
#define DebugLinkState_recovery_fake_word_tag    9
#define DebugLinkState_recovery_word_pos_tag     10
#define DebugLinkState_reset_word_pos_tag        11
#define DebugLinkState_mnemonic_type_tag         12

/* Struct field encoding specification for nanopb */
extern const pb_field_t DebugLinkDecision_fields[4];
extern const pb_field_t DebugLinkGetState_fields[1];
extern const pb_field_t DebugLinkState_fields[13];
extern const pb_field_t DebugLinkStop_fields[1];
extern const pb_field_t DebugLinkLog_fields[4];
extern const pb_field_t DebugLinkMemoryRead_fields[3];
extern const pb_field_t DebugLinkMemory_fields[2];
extern const pb_field_t DebugLinkMemoryWrite_fields[4];
extern const pb_field_t DebugLinkFlashErase_fields[2];

/* Maximum encoded size of messages (where known) */
#define DebugLinkDecision_size                   39
#define DebugLinkGetState_size                   0
#define DebugLinkState_size                      (1479 + HDNodeType_size)
#define DebugLinkStop_size                       0
#define DebugLinkLog_size                        300
#define DebugLinkMemoryRead_size                 12
#define DebugLinkMemory_size                     1027
#define DebugLinkMemoryWrite_size                1035
#define DebugLinkFlashErase_size                 6

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define MESSAGES_DEBUG_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
