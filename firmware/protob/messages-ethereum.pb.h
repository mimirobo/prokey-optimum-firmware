/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.3 */

#ifndef PB_HW_TREZOR_MESSAGES_ETHEREUM_MESSAGES_ETHEREUM_PB_H_INCLUDED
#define PB_HW_TREZOR_MESSAGES_ETHEREUM_MESSAGES_ETHEREUM_PB_H_INCLUDED
#include "pb.h"
#include "messages-common.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _EthereumAddress {
    pb_callback_t old_address;
    bool has_address;
    char address[43];
/* @@protoc_insertion_point(struct:EthereumAddress) */
} EthereumAddress;

typedef struct _EthereumGetAddress {
    pb_size_t address_n_count;
    uint32_t address_n[8];
    bool has_show_display;
    bool show_display;
/* @@protoc_insertion_point(struct:EthereumGetAddress) */
} EthereumGetAddress;

typedef struct _EthereumGetPublicKey {
    pb_size_t address_n_count;
    uint32_t address_n[8];
    bool has_show_display;
    bool show_display;
/* @@protoc_insertion_point(struct:EthereumGetPublicKey) */
} EthereumGetPublicKey;

typedef PB_BYTES_ARRAY_T(65) EthereumMessageSignature_signature_t;
typedef struct _EthereumMessageSignature {
    bool has_signature;
    EthereumMessageSignature_signature_t signature;
    bool has_address;
    char address[43];
/* @@protoc_insertion_point(struct:EthereumMessageSignature) */
} EthereumMessageSignature;

typedef struct _EthereumPublicKey {
    bool has_node;
    HDNodeType node;
    bool has_xpub;
    char xpub[113];
/* @@protoc_insertion_point(struct:EthereumPublicKey) */
} EthereumPublicKey;

typedef PB_BYTES_ARRAY_T(1024) EthereumSignMessage_message_t;
typedef struct _EthereumSignMessage {
    pb_size_t address_n_count;
    uint32_t address_n[8];
    bool has_message;
    EthereumSignMessage_message_t message;
/* @@protoc_insertion_point(struct:EthereumSignMessage) */
} EthereumSignMessage;

typedef PB_BYTES_ARRAY_T(32) EthereumSignTx_nonce_t;
typedef PB_BYTES_ARRAY_T(32) EthereumSignTx_gas_price_t;
typedef PB_BYTES_ARRAY_T(32) EthereumSignTx_gas_limit_t;
typedef PB_BYTES_ARRAY_T(32) EthereumSignTx_value_t;
typedef PB_BYTES_ARRAY_T(1024) EthereumSignTx_data_initial_chunk_t;
typedef struct _EthereumSignTx {
    pb_size_t address_n_count;
    uint32_t address_n[8];
    bool has_nonce;
    EthereumSignTx_nonce_t nonce;
    bool has_gas_price;
    EthereumSignTx_gas_price_t gas_price;
    bool has_gas_limit;
    EthereumSignTx_gas_limit_t gas_limit;
    bool has_value;
    EthereumSignTx_value_t value;
    bool has_data_initial_chunk;
    EthereumSignTx_data_initial_chunk_t data_initial_chunk;
    bool has_data_length;
    uint32_t data_length;
    bool has_chain_id;
    uint32_t chain_id;
    bool has_tx_type;
    uint32_t tx_type;
    bool has_to;
    char to[43];
/* @@protoc_insertion_point(struct:EthereumSignTx) */
} EthereumSignTx;

typedef PB_BYTES_ARRAY_T(1024) EthereumTxAck_data_chunk_t;
typedef struct _EthereumTxAck {
    bool has_data_chunk;
    EthereumTxAck_data_chunk_t data_chunk;
/* @@protoc_insertion_point(struct:EthereumTxAck) */
} EthereumTxAck;

typedef PB_BYTES_ARRAY_T(32) EthereumTxRequest_signature_r_t;
typedef PB_BYTES_ARRAY_T(32) EthereumTxRequest_signature_s_t;
typedef struct _EthereumTxRequest {
    bool has_data_length;
    uint32_t data_length;
    bool has_signature_v;
    uint32_t signature_v;
    bool has_signature_r;
    EthereumTxRequest_signature_r_t signature_r;
    bool has_signature_s;
    EthereumTxRequest_signature_s_t signature_s;
/* @@protoc_insertion_point(struct:EthereumTxRequest) */
} EthereumTxRequest;

typedef PB_BYTES_ARRAY_T(65) EthereumVerifyMessage_signature_t;
typedef PB_BYTES_ARRAY_T(1024) EthereumVerifyMessage_message_t;
typedef struct _EthereumVerifyMessage {
    bool has_signature;
    EthereumVerifyMessage_signature_t signature;
    bool has_message;
    EthereumVerifyMessage_message_t message;
    bool has_address;
    char address[43];
/* @@protoc_insertion_point(struct:EthereumVerifyMessage) */
} EthereumVerifyMessage;

/* Default values for struct fields */

/* Initializer values for message structs */
#define EthereumGetPublicKey_init_default        {0, {0, 0, 0, 0, 0, 0, 0, 0}, false, 0}
#define EthereumPublicKey_init_default           {false, HDNodeType_init_default, false, ""}
#define EthereumGetAddress_init_default          {0, {0, 0, 0, 0, 0, 0, 0, 0}, false, 0}
#define EthereumAddress_init_default             {{{NULL}, NULL}, false, ""}
#define EthereumSignTx_init_default              {0, {0, 0, 0, 0, 0, 0, 0, 0}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, 0, false, 0, false, 0, false, ""}
#define EthereumTxRequest_init_default           {false, 0, false, 0, false, {0, {0}}, false, {0, {0}}}
#define EthereumTxAck_init_default               {false, {0, {0}}}
#define EthereumSignMessage_init_default         {0, {0, 0, 0, 0, 0, 0, 0, 0}, false, {0, {0}}}
#define EthereumMessageSignature_init_default    {false, {0, {0}}, false, ""}
#define EthereumVerifyMessage_init_default       {false, {0, {0}}, false, {0, {0}}, false, ""}
#define EthereumGetPublicKey_init_zero           {0, {0, 0, 0, 0, 0, 0, 0, 0}, false, 0}
#define EthereumPublicKey_init_zero              {false, HDNodeType_init_zero, false, ""}
#define EthereumGetAddress_init_zero             {0, {0, 0, 0, 0, 0, 0, 0, 0}, false, 0}
#define EthereumAddress_init_zero                {{{NULL}, NULL}, false, ""}
#define EthereumSignTx_init_zero                 {0, {0, 0, 0, 0, 0, 0, 0, 0}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, 0, false, 0, false, 0, false, ""}
#define EthereumTxRequest_init_zero              {false, 0, false, 0, false, {0, {0}}, false, {0, {0}}}
#define EthereumTxAck_init_zero                  {false, {0, {0}}}
#define EthereumSignMessage_init_zero            {0, {0, 0, 0, 0, 0, 0, 0, 0}, false, {0, {0}}}
#define EthereumMessageSignature_init_zero       {false, {0, {0}}, false, ""}
#define EthereumVerifyMessage_init_zero          {false, {0, {0}}, false, {0, {0}}, false, ""}

/* Field tags (for use in manual encoding/decoding) */
#define EthereumAddress_old_address_tag          1
#define EthereumAddress_address_tag              2
#define EthereumGetAddress_address_n_tag         1
#define EthereumGetAddress_show_display_tag      2
#define EthereumGetPublicKey_address_n_tag       1
#define EthereumGetPublicKey_show_display_tag    2
#define EthereumMessageSignature_signature_tag   2
#define EthereumMessageSignature_address_tag     3
#define EthereumPublicKey_node_tag               1
#define EthereumPublicKey_xpub_tag               2
#define EthereumSignMessage_address_n_tag        1
#define EthereumSignMessage_message_tag          2
#define EthereumSignTx_address_n_tag             1
#define EthereumSignTx_nonce_tag                 2
#define EthereumSignTx_gas_price_tag             3
#define EthereumSignTx_gas_limit_tag             4
#define EthereumSignTx_to_tag                    11
#define EthereumSignTx_value_tag                 6
#define EthereumSignTx_data_initial_chunk_tag    7
#define EthereumSignTx_data_length_tag           8
#define EthereumSignTx_chain_id_tag              9
#define EthereumSignTx_tx_type_tag               10
#define EthereumTxAck_data_chunk_tag             1
#define EthereumTxRequest_data_length_tag        1
#define EthereumTxRequest_signature_v_tag        2
#define EthereumTxRequest_signature_r_tag        3
#define EthereumTxRequest_signature_s_tag        4
#define EthereumVerifyMessage_signature_tag      2
#define EthereumVerifyMessage_message_tag        3
#define EthereumVerifyMessage_address_tag        4

/* Struct field encoding specification for nanopb */
extern const pb_field_t EthereumGetPublicKey_fields[3];
extern const pb_field_t EthereumPublicKey_fields[3];
extern const pb_field_t EthereumGetAddress_fields[3];
extern const pb_field_t EthereumAddress_fields[3];
extern const pb_field_t EthereumSignTx_fields[11];
extern const pb_field_t EthereumTxRequest_fields[5];
extern const pb_field_t EthereumTxAck_fields[2];
extern const pb_field_t EthereumSignMessage_fields[3];
extern const pb_field_t EthereumMessageSignature_fields[3];
extern const pb_field_t EthereumVerifyMessage_fields[4];

/* Maximum encoded size of messages (where known) */
#define EthereumGetPublicKey_size                50
#define EthereumPublicKey_size                   (121 + HDNodeType_size)
#define EthereumGetAddress_size                  50
/* EthereumAddress_size depends on runtime parameters */
#define EthereumSignTx_size                      1274
#define EthereumTxRequest_size                   80
#define EthereumTxAck_size                       1027
#define EthereumSignMessage_size                 1075
#define EthereumMessageSignature_size            112
#define EthereumVerifyMessage_size               1139

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define MESSAGES_ETHEREUM_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
