/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.3 */

#ifndef PB_HW_TREZOR_MESSAGES_MANAGEMENT_MESSAGES_MANAGEMENT_PB_H_INCLUDED
#define PB_HW_TREZOR_MESSAGES_MANAGEMENT_MESSAGES_MANAGEMENT_PB_H_INCLUDED
#include "pb.h"
#include "messages-common.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _PassphraseSourceType {
    PassphraseSourceType_ASK = 0,
    PassphraseSourceType_DEVICE = 1,
    PassphraseSourceType_HOST = 2
} PassphraseSourceType;
#define _PassphraseSourceType_MIN PassphraseSourceType_ASK
#define _PassphraseSourceType_MAX PassphraseSourceType_HOST
#define _PassphraseSourceType_ARRAYSIZE ((PassphraseSourceType)(PassphraseSourceType_HOST+1))

typedef enum _RecoveryDeviceType {
    RecoveryDeviceType_RecoveryDeviceType_ScrambledWords = 0,
    RecoveryDeviceType_RecoveryDeviceType_Matrix = 1
} RecoveryDeviceType;
#define _RecoveryDeviceType_MIN RecoveryDeviceType_RecoveryDeviceType_ScrambledWords
#define _RecoveryDeviceType_MAX RecoveryDeviceType_RecoveryDeviceType_Matrix
#define _RecoveryDeviceType_ARRAYSIZE ((RecoveryDeviceType)(RecoveryDeviceType_RecoveryDeviceType_Matrix+1))

typedef enum _WordRequestType {
    WordRequestType_WordRequestType_Plain = 0,
    WordRequestType_WordRequestType_Matrix9 = 1,
    WordRequestType_WordRequestType_Matrix6 = 2
} WordRequestType;
#define _WordRequestType_MIN WordRequestType_WordRequestType_Plain
#define _WordRequestType_MAX WordRequestType_WordRequestType_Matrix6
#define _WordRequestType_ARRAYSIZE ((WordRequestType)(WordRequestType_WordRequestType_Matrix6+1))

/* Struct definitions */
typedef struct _BackupDevice {
    char dummy_field;
/* @@protoc_insertion_point(struct:BackupDevice) */
} BackupDevice;

typedef struct _Cancel {
    char dummy_field;
/* @@protoc_insertion_point(struct:Cancel) */
} Cancel;

typedef struct _ClearSession {
    char dummy_field;
/* @@protoc_insertion_point(struct:ClearSession) */
} ClearSession;

typedef struct _EntropyRequest {
    char dummy_field;
/* @@protoc_insertion_point(struct:EntropyRequest) */
} EntropyRequest;

typedef struct _GetFeatures {
    char dummy_field;
/* @@protoc_insertion_point(struct:GetFeatures) */
} GetFeatures;

typedef struct _WipeDevice {
    char dummy_field;
/* @@protoc_insertion_point(struct:WipeDevice) */
} WipeDevice;

typedef struct _ApplyFlags {
    bool has_flags;
    uint32_t flags;
/* @@protoc_insertion_point(struct:ApplyFlags) */
} ApplyFlags;

typedef PB_BYTES_ARRAY_T(1024) ApplySettings_homescreen_t;
typedef struct _ApplySettings {
    bool has_language;
    char language[17];
    bool has_label;
    char label[33];
    bool has_use_passphrase;
    bool use_passphrase;
    bool has_homescreen;
    ApplySettings_homescreen_t homescreen;
    bool has_passphrase_source;
    PassphraseSourceType passphrase_source;
    bool has_auto_lock_delay_ms;
    uint32_t auto_lock_delay_ms;
    bool has_display_rotation;
    uint32_t display_rotation;
/* @@protoc_insertion_point(struct:ApplySettings) */
} ApplySettings;

typedef struct _ChangePin {
    bool has_remove;
    bool remove;
/* @@protoc_insertion_point(struct:ChangePin) */
} ChangePin;

typedef PB_BYTES_ARRAY_T(1024) Entropy_entropy_t;
typedef struct _Entropy {
    Entropy_entropy_t entropy;
/* @@protoc_insertion_point(struct:Entropy) */
} Entropy;

typedef PB_BYTES_ARRAY_T(128) EntropyAck_entropy_t;
typedef struct _EntropyAck {
    bool has_entropy;
    EntropyAck_entropy_t entropy;
/* @@protoc_insertion_point(struct:EntropyAck) */
} EntropyAck;

typedef PB_BYTES_ARRAY_T(20) Features_revision_t;
typedef PB_BYTES_ARRAY_T(32) Features_bootloader_hash_t;
typedef PB_BYTES_ARRAY_T(32) Features_fw_vendor_keys_t;
typedef struct _Features {
    bool has_vendor;
    char vendor[33];
    bool has_major_version;
    uint32_t major_version;
    bool has_minor_version;
    uint32_t minor_version;
    bool has_patch_version;
    uint32_t patch_version;
    bool has_bootloader_mode;
    bool bootloader_mode;
    bool has_device_id;
    char device_id[25];
    bool has_pin_protection;
    bool pin_protection;
    bool has_passphrase_protection;
    bool passphrase_protection;
    bool has_language;
    char language[17];
    bool has_label;
    char label[33];
    bool has_initialized;
    bool initialized;
    bool has_revision;
    Features_revision_t revision;
    bool has_bootloader_hash;
    Features_bootloader_hash_t bootloader_hash;
    bool has_imported;
    bool imported;
    bool has_pin_cached;
    bool pin_cached;
    bool has_passphrase_cached;
    bool passphrase_cached;
    bool has_firmware_present;
    bool firmware_present;
    bool has_needs_backup;
    bool needs_backup;
    bool has_flags;
    uint32_t flags;
    bool has_model;
    char model[17];
    bool has_fw_major;
    uint32_t fw_major;
    bool has_fw_minor;
    uint32_t fw_minor;
    bool has_fw_patch;
    uint32_t fw_patch;
    bool has_fw_vendor;
    char fw_vendor[256];
    bool has_fw_vendor_keys;
    Features_fw_vendor_keys_t fw_vendor_keys;
    bool has_unfinished_backup;
    bool unfinished_backup;
    bool has_no_backup;
    bool no_backup;
/* @@protoc_insertion_point(struct:Features) */
} Features;

typedef struct _GetEntropy {
    uint32_t size;
/* @@protoc_insertion_point(struct:GetEntropy) */
} GetEntropy;

typedef PB_BYTES_ARRAY_T(64) Initialize_state_t;
typedef struct _Initialize {
    bool has_state;
    Initialize_state_t state;
    bool has_skip_passphrase;
    bool skip_passphrase;
/* @@protoc_insertion_point(struct:Initialize) */
} Initialize;

typedef struct _LoadDevice {
    bool has_mnemonic;
    char mnemonic[241];
    bool has_node;
    HDNodeType node;
    bool has_pin;
    char pin[10];
    bool has_passphrase_protection;
    bool passphrase_protection;
    bool has_language;
    char language[17];
    bool has_label;
    char label[33];
    bool has_skip_checksum;
    bool skip_checksum;
    bool has_u2f_counter;
    uint32_t u2f_counter;
/* @@protoc_insertion_point(struct:LoadDevice) */
} LoadDevice;

typedef struct _Ping {
    bool has_message;
    char message[256];
    bool has_button_protection;
    bool button_protection;
    bool has_pin_protection;
    bool pin_protection;
    bool has_passphrase_protection;
    bool passphrase_protection;
/* @@protoc_insertion_point(struct:Ping) */
} Ping;

typedef struct _RecoveryDevice {
    bool has_word_count;
    uint32_t word_count;
    bool has_passphrase_protection;
    bool passphrase_protection;
    bool has_pin_protection;
    bool pin_protection;
    bool has_language;
    char language[17];
    bool has_label;
    char label[33];
    bool has_enforce_wordlist;
    bool enforce_wordlist;
    bool has_type;
    RecoveryDeviceType type;
    bool has_u2f_counter;
    uint32_t u2f_counter;
    bool has_dry_run;
    bool dry_run;
/* @@protoc_insertion_point(struct:RecoveryDevice) */
} RecoveryDevice;

typedef struct _ResetDevice {
    bool has_display_random;
    bool display_random;
    bool has_strength;
    uint32_t strength;
    bool has_passphrase_protection;
    bool passphrase_protection;
    bool has_pin_protection;
    bool pin_protection;
    bool has_language;
    char language[17];
    bool has_label;
    char label[33];
    bool has_u2f_counter;
    uint32_t u2f_counter;
    bool has_skip_backup;
    bool skip_backup;
    bool has_no_backup;
    bool no_backup;
/* @@protoc_insertion_point(struct:ResetDevice) */
} ResetDevice;

typedef struct _SetU2FCounter {
    bool has_u2f_counter;
    uint32_t u2f_counter;
/* @@protoc_insertion_point(struct:SetU2FCounter) */
} SetU2FCounter;

typedef struct _WordAck {
    char word[12];
/* @@protoc_insertion_point(struct:WordAck) */
} WordAck;

typedef struct _WordRequest {
    bool has_type;
    WordRequestType type;
/* @@protoc_insertion_point(struct:WordRequest) */
} WordRequest;

/* Default values for struct fields */
extern const char LoadDevice_language_default[17];
extern const uint32_t ResetDevice_strength_default;
extern const char ResetDevice_language_default[17];
extern const char RecoveryDevice_language_default[17];

/* Initializer values for message structs */
#define Initialize_init_default                  {false, {0, {0}}, false, 0}
#define GetFeatures_init_default                 {0}
#define Features_init_default                    {false, "", false, 0, false, 0, false, 0, false, 0, false, "", false, 0, false, 0, false, "", false, "", false, 0, false, {0, {0}}, false, {0, {0}}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, "", false, 0, false, 0, false, 0, false, "", false, {0, {0}}, false, 0, false, 0}
#define ClearSession_init_default                {0}
#define ApplySettings_init_default               {false, "", false, "", false, 0, false, {0, {0}}, false, _PassphraseSourceType_MIN, false, 0, false, 0}
#define ApplyFlags_init_default                  {false, 0}
#define ChangePin_init_default                   {false, 0}
#define Ping_init_default                        {false, "", false, 0, false, 0, false, 0}
#define Cancel_init_default                      {0}
#define GetEntropy_init_default                  {0}
#define Entropy_init_default                     {{0, {0}}}
#define WipeDevice_init_default                  {0}
#define LoadDevice_init_default                  {false, "", false, HDNodeType_init_default, false, "", false, 0, false, "english", false, "", false, 0, false, 0}
#define ResetDevice_init_default                 {false, 0, false, 256u, false, 0, false, 0, false, "english", false, "", false, 0, false, 0, false, 0}
#define BackupDevice_init_default                {0}
#define EntropyRequest_init_default              {0}
#define EntropyAck_init_default                  {false, {0, {0}}}
#define RecoveryDevice_init_default              {false, 0, false, 0, false, 0, false, "english", false, "", false, 0, false, _RecoveryDeviceType_MIN, false, 0, false, 0}
#define WordRequest_init_default                 {false, _WordRequestType_MIN}
#define WordAck_init_default                     {""}
#define SetU2FCounter_init_default               {false, 0}
#define Initialize_init_zero                     {false, {0, {0}}, false, 0}
#define GetFeatures_init_zero                    {0}
#define Features_init_zero                       {false, "", false, 0, false, 0, false, 0, false, 0, false, "", false, 0, false, 0, false, "", false, "", false, 0, false, {0, {0}}, false, {0, {0}}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, "", false, 0, false, 0, false, 0, false, "", false, {0, {0}}, false, 0, false, 0}
#define ClearSession_init_zero                   {0}
#define ApplySettings_init_zero                  {false, "", false, "", false, 0, false, {0, {0}}, false, _PassphraseSourceType_MIN, false, 0, false, 0}
#define ApplyFlags_init_zero                     {false, 0}
#define ChangePin_init_zero                      {false, 0}
#define Ping_init_zero                           {false, "", false, 0, false, 0, false, 0}
#define Cancel_init_zero                         {0}
#define GetEntropy_init_zero                     {0}
#define Entropy_init_zero                        {{0, {0}}}
#define WipeDevice_init_zero                     {0}
#define LoadDevice_init_zero                     {false, "", false, HDNodeType_init_zero, false, "", false, 0, false, "", false, "", false, 0, false, 0}
#define ResetDevice_init_zero                    {false, 0, false, 0, false, 0, false, 0, false, "", false, "", false, 0, false, 0, false, 0}
#define BackupDevice_init_zero                   {0}
#define EntropyRequest_init_zero                 {0}
#define EntropyAck_init_zero                     {false, {0, {0}}}
#define RecoveryDevice_init_zero                 {false, 0, false, 0, false, 0, false, "", false, "", false, 0, false, _RecoveryDeviceType_MIN, false, 0, false, 0}
#define WordRequest_init_zero                    {false, _WordRequestType_MIN}
#define WordAck_init_zero                        {""}
#define SetU2FCounter_init_zero                  {false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define ApplyFlags_flags_tag                     1
#define ApplySettings_language_tag               1
#define ApplySettings_label_tag                  2
#define ApplySettings_use_passphrase_tag         3
#define ApplySettings_homescreen_tag             4
#define ApplySettings_passphrase_source_tag      5
#define ApplySettings_auto_lock_delay_ms_tag     6
#define ApplySettings_display_rotation_tag       7
#define ChangePin_remove_tag                     1
#define Entropy_entropy_tag                      1
#define EntropyAck_entropy_tag                   1
#define Features_vendor_tag                      1
#define Features_major_version_tag               2
#define Features_minor_version_tag               3
#define Features_patch_version_tag               4
#define Features_bootloader_mode_tag             5
#define Features_device_id_tag                   6
#define Features_pin_protection_tag              7
#define Features_passphrase_protection_tag       8
#define Features_language_tag                    9
#define Features_label_tag                       10
#define Features_initialized_tag                 12
#define Features_revision_tag                    13
#define Features_bootloader_hash_tag             14
#define Features_imported_tag                    15
#define Features_pin_cached_tag                  16
#define Features_passphrase_cached_tag           17
#define Features_firmware_present_tag            18
#define Features_needs_backup_tag                19
#define Features_flags_tag                       20
#define Features_model_tag                       21
#define Features_fw_major_tag                    22
#define Features_fw_minor_tag                    23
#define Features_fw_patch_tag                    24
#define Features_fw_vendor_tag                   25
#define Features_fw_vendor_keys_tag              26
#define Features_unfinished_backup_tag           27
#define Features_no_backup_tag                   28
#define GetEntropy_size_tag                      1
#define Initialize_state_tag                     1
#define Initialize_skip_passphrase_tag           2
#define LoadDevice_mnemonic_tag                  1
#define LoadDevice_node_tag                      2
#define LoadDevice_pin_tag                       3
#define LoadDevice_passphrase_protection_tag     4
#define LoadDevice_language_tag                  5
#define LoadDevice_label_tag                     6
#define LoadDevice_skip_checksum_tag             7
#define LoadDevice_u2f_counter_tag               8
#define Ping_message_tag                         1
#define Ping_button_protection_tag               2
#define Ping_pin_protection_tag                  3
#define Ping_passphrase_protection_tag           4
#define RecoveryDevice_word_count_tag            1
#define RecoveryDevice_passphrase_protection_tag 2
#define RecoveryDevice_pin_protection_tag        3
#define RecoveryDevice_language_tag              4
#define RecoveryDevice_label_tag                 5
#define RecoveryDevice_enforce_wordlist_tag      6
#define RecoveryDevice_type_tag                  8
#define RecoveryDevice_u2f_counter_tag           9
#define RecoveryDevice_dry_run_tag               10
#define ResetDevice_display_random_tag           1
#define ResetDevice_strength_tag                 2
#define ResetDevice_passphrase_protection_tag    3
#define ResetDevice_pin_protection_tag           4
#define ResetDevice_language_tag                 5
#define ResetDevice_label_tag                    6
#define ResetDevice_u2f_counter_tag              7
#define ResetDevice_skip_backup_tag              8
#define ResetDevice_no_backup_tag                9
#define SetU2FCounter_u2f_counter_tag            1
#define WordAck_word_tag                         1
#define WordRequest_type_tag                     1

/* Struct field encoding specification for nanopb */
extern const pb_field_t Initialize_fields[3];
extern const pb_field_t GetFeatures_fields[1];
extern const pb_field_t Features_fields[28];
extern const pb_field_t ClearSession_fields[1];
extern const pb_field_t ApplySettings_fields[8];
extern const pb_field_t ApplyFlags_fields[2];
extern const pb_field_t ChangePin_fields[2];
extern const pb_field_t Ping_fields[5];
extern const pb_field_t Cancel_fields[1];
extern const pb_field_t GetEntropy_fields[2];
extern const pb_field_t Entropy_fields[2];
extern const pb_field_t WipeDevice_fields[1];
extern const pb_field_t LoadDevice_fields[9];
extern const pb_field_t ResetDevice_fields[10];
extern const pb_field_t BackupDevice_fields[1];
extern const pb_field_t EntropyRequest_fields[1];
extern const pb_field_t EntropyAck_fields[2];
extern const pb_field_t RecoveryDevice_fields[10];
extern const pb_field_t WordRequest_fields[2];
extern const pb_field_t WordAck_fields[2];
extern const pb_field_t SetU2FCounter_fields[2];

/* Maximum encoded size of messages (where known) */
#define Initialize_size                          68
#define GetFeatures_size                         0
#define Features_size                            561
#define ClearSession_size                        0
#define ApplySettings_size                       1097
#define ApplyFlags_size                          6
#define ChangePin_size                           2
#define Ping_size                                265
#define Cancel_size                              0
#define GetEntropy_size                          6
#define Entropy_size                             1027
#define WipeDevice_size                          0
#define LoadDevice_size                          (326 + HDNodeType_size)
#define ResetDevice_size                         76
#define BackupDevice_size                        0
#define EntropyRequest_size                      0
#define EntropyAck_size                          131
#define RecoveryDevice_size                      76
#define WordRequest_size                         2
#define WordAck_size                             14
#define SetU2FCounter_size                       6

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define MESSAGES_MANAGEMENT_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
